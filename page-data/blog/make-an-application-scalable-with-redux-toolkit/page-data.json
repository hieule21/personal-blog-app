{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/make-an-application-scalable-with-redux-toolkit/","result":{"data":{"mdx":{"id":"9a1709be-5f20-5a56-b4e8-ab4b1f2b67c4","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Make an application scalable with Redux Toolkit\",\n  \"description\": \"This post shows how useful Redux Toolkit is, an upgraded version of Redux\",\n  \"path\": \"/make-application-scalable-with-redux-toolkit\",\n  \"date\": \"2020-07-27T00:00:00.000Z\",\n  \"tag\": \"Redux\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hello, world! While building cv builder project, I encountered a situation that I need to pass input data from a component to the component\\nwhere I want to render the data out. However, when the project get larger, it is hard to do so and maintain if needed. In this\\nsituation, a third party is needed as a storage holding data and allowing all components access directly. Here comes Redux Toolkit!\"), mdx(\"h2\", null, \"What I use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NodeJS and NPM\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HTML, CSS and Javascript(ES6)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ReactJS with Redux Toolkit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Starter kit: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/hieuvanle/cv-builder/tree/c6258c862eb5b55d2b58a717d66a0cc153ff7129\"\n  }), \"Download here\"))), mdx(\"h2\", null, \"What is the problem here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"After running the stater kit succesfully, go ahead to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://locahost:3000/project\"\n  }), \"http://locahost:3000/project\"), \" which is\\nwhere component InfoForm and FirstTemplate are rendered out.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"I want to get input data from component InfoForm and render it out in component FirstTemplate.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"As in the folder structure, component FirstTemplate is a sibling of the parent component of component InfoForm. Therefore,\\nusing useState hook only to pass data through a few components before reaching component FirstTemplate is complicated.\"))), mdx(\"h2\", null, \"Install Redux Toolkit:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The purpose of Redux Toolkit is to reduce the huge amount of boilerplates that Redux requires developers to write.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More details could be found in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://redux-toolkit.js.org/\"\n  }), \"Redux Toolkit's documentation\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install the library:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-npm\"\n  }), \"    npm install @reduxjs/toolkit\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redux concept (3 components): Imagine we're comming to a cloth store\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"store: This component is the cloth \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"store\"), \" itself, where all cloths are kept in the storage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"action creator: As a customer comming to the store, we are the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"action creators\"), \" create \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"actions\"), \" such as buying cloths or returning cloths\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reducer: The staff at the store who process customer's requests and make changes to the store\")))), mdx(\"h2\", null, \"Initial store setup:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Of course, for the store works normally, we need staff which are reducers. Go to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"src/index.js\"), \" and append this code:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Provider } from \\\"react-redux\\\"\\nimport rootReducer from \\\"./redux/rootReducer\\\"\\nimport { configureStore } from \\\"@reduxjs/toolkit\\\"\\n\\nconst store = configureStore({\\n  reducer: rootReducer,\\n})\\n\\nReactDOM.render(\\n  <Provider store={store}>\\n    <App />\\n  </Provider>,\\n  document.getElementById(\\\"root\\\")\\n)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"configureStore method allows us to create a new store for our app to register, requiring reducers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We use only rootReducer as the manager of all other staff. We will combines all reducers to rootReducer in a different folder.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provider helps us register our app to the store we just created, so that every component in our app can access to the store.\")), mdx(\"h2\", null, \"Setup Redux folder:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new folder named \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Redux\"), \" in \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"src\"), \" folder, then create two files named \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rootReducer.js\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"infoFormReducer.js\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As mentioned above, \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rootReducer.js\"), \" is where we write the manager for the store and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"infoFormReducer.js\"), \" is where we\\nwrite our first staff who is responsible for info form only.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"infoFormReducer.js\"), \", we import and use method \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"createSlice\"), \" from Redux Toolkit. The method helps us reduce the boilerplates\\nif we use Redux only. A slice requires slice name, its initialState, reducers and action creators which are automatically created\\nwithin each reducer:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { createSlice } from \\\"@reduxjs/toolkit\\\"\\n\\nconst infoFormSlice = createSlice({\\n  name: \\\"infoForm\\\",\\n  initialState: {\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n    email: \\\"\\\",\\n    phone: \\\"\\\",\\n    github: \\\"\\\",\\n    personalSite: \\\"\\\",\\n    summary: \\\"\\\",\\n  },\\n  reducers: {\\n    inputInfo(state, action) {\\n      const {\\n        firstName,\\n        lastName,\\n        email,\\n        phone,\\n        github,\\n        personalSite,\\n        summary,\\n      } = action.payload\\n      return {\\n        ...state,\\n        firstName,\\n        lastName,\\n        email,\\n        phone,\\n        github,\\n        personalSite,\\n        summary,\\n      }\\n    },\\n  },\\n})\\n\\nexport default infoFormSlice.reducer\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now we have one staff(can have more if needed), enough to make the rootReducer with combineReducers method. In \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rootReducer.js\"), \":\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { combineReducers } from \\\"redux\\\"\\nimport infoFormReducer from \\\"./infoFormReducer\\\"\\n\\nexport default combineReducers({\\n  infoForm: infoFormReducer,\\n})\\n\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The name of each reducer(before the colon) in the rootReducer is important and will be the reference to itself.\")), mdx(\"h2\", null, \"Redux Toolkit is ready to used:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The third-party storage should be already installed and ready to use.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To let all components communicate with redux store easily, we need the library \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"react-redux\"), \" and its hooks, as a telephone\\nwhen customers want to order cloths from the store.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"react-redux\"), \":\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-npm\"\n  }), \"npm install react-redux\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We will be using two main hooks from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"react-redux\"), \" library:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useSelector: This hook helps us get data from reducers' state by using the reference name defined in \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rootReducer\"), \". For example:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const infoFormState = useSelector(state => state.infoForm)\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useDispatch: This hook creates a virtual customer as known as dispatcher to dispatch actions such as buying cloths or returning cloths. For example:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const dispatcher = useDispatch()\\ndispatch({ type: \\\"infoForm/inputInfo\\\", payload: \\\"anything\\\" })\\n\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With that in mind, we can apply them into our app. In \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"src/components/infoForm/infoForm.js\"), \":\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the beginning of the functional component, append:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const infoForm = useSelector(state => state.infoForm)\\nconst dispatch = useDispatch()\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In handleChange function, append:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"dispatch({ type: \\\"infoForm/inputInfo\\\", payload: personalDetails })\\n\")))))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What this does is whenever an input is detected, the state of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"infoForm\"), \" reducer is updated. From there, we can use useSelector\\nin any other components to access the input data from \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"infoForm\"), \" component conveniently!\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Make an application scalable with Redux Toolkit"}},"site":{"siteMetadata":{"author":"Hieu Le"}}},"pageContext":{"id":"9a1709be-5f20-5a56-b4e8-ab4b1f2b67c4","previous":null,"next":{"id":"7e7106fe-3992-5918-89cd-a91da908105c","fields":{"slug":"/blog/how-to-make-this-blog-with-gatsby/"},"frontmatter":{"title":"How to make blog with Gatsby"}}}}}